<%
/*
 * Copyright (c) 2017, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 *   WSO2 Inc. licenses this file to you under the Apache License,
 *   Version 2.0 (the "License"); you may not use this file except
 *   in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing,
 *   software distributed under the License is distributed on an
 *   "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *   KIND, either express or implied.  See the License for the
 *   specific language governing permissions and limitations
 *   under the License.
 */
%>

<%
var log = new Log();
var i18n = session.get("i18n");
var appManager = require("thememanager");
var managerHostObj = new appManager.ThemeManager();

uploadTheme();

function uploadTheme() {
    var error = false;
    var errorMsg = "Theme was uploaded successfully.";
    var themeFile = request.getFile("themeFile");
    var whiteListedExt = getWhiteListedFileExt();
    var userInfo = session.get("userInfo");
    var tenantDomain = userInfo.tenantDomain + "";
    var themeName = request.getParameter("themeName");
    var description = request.getParameter("description");

    if (tenantDomain == null || tenantDomain == '') {
        error = true;
        errorMsg = "Tenant is not specified, unable to deploy the theme.";
        log.error(errorMsg);
    } else {
        try {
            managerHostObj.addCustomTheme(themeFile, tenantDomain, whiteListedExt, themeName, description);
        } catch (e) {
            error = true;
            errorMsg = "Error while deploying theme on tenant:" + tenantDomain;
            log.error(errorMsg, e);
        }
    }

    print({
        "error": error,
        "errorMsg": errorMsg
    });
}

function getWhiteListedFileExt() {
    var path = "/conf/site.json";
    var file = new File(path);
    file.open("r");
    var json;
    var result = [];

    json = file.readAll();
    file.close();
    var jsonConf = parse(json);

    if (!jsonConf.hasOwnProperty('customStoreThemeConfig')) {
        log.error("customStoreThemeConfig property is not defined in site.json");
    } else if (!jsonConf.customStoreThemeConfig.hasOwnProperty('whitelist')) {
        log.error("whitelist property is not defined in site.json");
    } else {
        result = jsonConf.customStoreThemeConfig.whitelist;
    }
    return result;
}

%>
