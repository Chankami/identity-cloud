<%
include("../wsUtil.jag");
var util = require("../../util/utility.jag");
var generalLocalClaimConfig = require("/conf/general-local-claim-set.json");

var log = new Log("samlSSOConfigServiceClient : ");
var serverUrl = util.getServerUrl();
serverUrl = serverUrl + "/IdentitySAMLSSOConfigService";
serverUrlForLocalClaims = util.getServerUrl() + "/IdentityApplicationManagementService";

var ws = require('ws');
var webService = new ws.WSRequest();

function getServiceProviders(){
    webService = new ws.WSRequest();
    var result = callWSReturnJSON(webService, serverUrl, "urn:getServiceProviders", null);
    return result;
}

function getClaimURIs() {
    webService = new ws.WSRequest();
    var result = callWSReturnJSON(webService, serverUrlForLocalClaims, "urn:getAllLocalClaimUris", null);

    var combinedClaimArray = [];
    combinedClaimArray[0] = result.return;
    combinedClaimArray[1] = generalLocalClaimConfig.generalClaims;

    var requiredClaimSet = util.getIntersectionArrayFromArrays(combinedClaimArray).sort();
    var returnObj = {};
    returnObj.return = requiredClaimSet;
    return returnObj;
}

function getCertAliasOfPrimaryKeyStore(){
    webService = new ws.WSRequest();
    var result = callWSReturnJSON(webService, serverUrl, "urn:getCertAliasOfPrimaryKeyStore", null);
    return result;
}

function getSigningAlgorithmUris(){
    webService = new ws.WSRequest();
    var result = callWSReturnJSON(webService, serverUrl, "urn:getSigningAlgorithmUris", null);
    return result;
}

function getDigestAlgorithmURIs(){
    webService = new ws.WSRequest();
    var result = callWSReturnJSON(webService, serverUrl, "urn:getDigestAlgorithmURIs", null);
    return result;
}
function getSigningAlgorithmUriByConfig(){
    webService = new ws.WSRequest();
    var result = callWSReturnJSON(webService, serverUrl, "urn:getSigningAlgorithmUriByConfig", null);
    return result;
}
function getDigestAlgorithmURIByConfig(){
    webService = new ws.WSRequest();
    var result = callWSReturnJSON(webService, serverUrl, "urn:getDigestAlgorithmURIByConfig", null);
    return result;
}
function removeServiceProvider(issuer){
    webService = new ws.WSRequest();
    callWSInOnlyWithParams(webService, serverUrl, "urn:removeServiceProvider", issuer ? new Array(issuer) : new Array("") );
}
function addRPServiceProvider(payload){
    webService = new ws.WSRequest();
    callWSInOnly(webService, serverUrl, "urn:addRPServiceProvider", payload);
}

%>