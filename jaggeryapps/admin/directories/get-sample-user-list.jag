<%
/*
 * Copyright (c) 2016, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 *   WSO2 Inc. licenses this file to you under the Apache License,
 *   Version 2.0 (the "License"); you may not use this file except
 *   in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing,
 *   software distributed under the License is distributed on an
 *   "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *   KIND, either express or implied.  See the License for the
 *   specific language governing permissions and limitations
 *   under the License.
 */

var log = new Log();
include("../controllers/wsUtil.jag");
var util = require("../util/utility.jag");

var serverUrl = util.getServerUrl();
var sampleUserStoreServerUrl = serverUrl + "/UserAdmin";
serverUrl = serverUrl + "/RemoteUserStoreManagerService";
var ws = require('ws');
var webService = new ws.WSRequest();
var i18n = session.get("i18n");
var userInfo = session.get("userInfo");
var tenantDomain = userInfo.tenantDomain;

getSampleUsers();
function getSampleUsers() {
    try {
        var getUser = '<xsd:listUsers xmlns:xsd="http://org.apache.axis2/xsd" xmlns:xsd1="http://common.mgt.user.carbon.wso2.org/xsd">' +
                '<xsd:filter>' + "filter" + '</xsd:filter>' +
                '<xsd:limit>' + "-1" + '</xsd:limit>' +
                '</xsd:listUsers>';

        webService = new ws.WSRequest();
        var users = callWSReturnJSON(webService, sampleUserStoreServerUrl, "urn:listUsers", null, getUser);
        
        var user,jsonAry = [];
        for (var i = 0; i < users.return.length; i++) {
            user = {};
            if (users.return[i].indexOf("/") > -1) {
                user.name = users.return[i].split("/")[1];
                user.password = users.return[i].split("/")[2];
            }
            jsonAry.push(user);
        }
        print(jsonAry);
    } catch (e) {
        print(getErrorMessage(e.message));
        log.error(e);
    }
}

function getErrorMessage(message) {
    if (message != null && message.length > 0) {
        if (message.indexOf('401 Error: Unauthorized') > -1) {
            return '{"success":false, "reLogin":true}';
        } else {
            var msg = message.split(':');
            if (msg.length > 0) {
                return '{"success":false, "message":"' + msg[1] + '"}';
            }
        }
    }
    return '{"success":false, "message":null}';
}
%>