<%
/*
 * Copyright (c) 2016, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 *   WSO2 Inc. licenses this file to you under the Apache License,
 *   Version 2.0 (the "License"); you may not use this file except
 *   in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing,
 *   software distributed under the License is distributed on an
 *   "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *   KIND, either express or implied.  See the License for the
 *   specific language governing permissions and limitations
 *   under the License.
 */

var log = new Log();

include("../controllers/wsUtil.jag");
var util = require("../util/utility.jag");

var serverUrl = util.getServerUrl();
serverUrl = serverUrl + "/AgentMgtService";
var ws = require('ws');
var webService = new ws.WSRequest();
var download = request.getParameter("download");
const AGENT_FILE_PATH_SESSION = "agentFilePath";

if(download == "true") {
    downloadAgent();
}else{
    createAgent();
}

function createAgent(){
    try{
        webService = new ws.WSRequest();
        var result = callWSReturnJSON(webService, serverUrl, "urn:getAgentFilePath", null);
        session.put(AGENT_FILE_PATH_SESSION, result.return);
        print('{"success":true}');
    }catch(e){
        print(getErrorMessage(e.message));
        log.error(e);
    }
}

function downloadAgent(){
    try{
        var agentFilePath = session.get(AGENT_FILE_PATH_SESSION);
        var file = new File("file://" + agentFilePath);
        session.remove(AGENT_FILE_PATH_SESSION);
        if (file.isExists()) {
            response.addHeader('Content-Disposition', 'attachment;filename="wso2agent.zip"');
            print(file.getStream());
        } else {
            response.sendError(400);
        }
    }catch(e){
        print(getErrorMessage(e.message));
        log.error(e);
    }
}


function getErrorMessage(message) {
    if (message != null && message.length > 0) {
        if (message.indexOf('401 Error: Unauthorized') > -1) {
            return '{"success":false, "reLogin":true}';
        } else {
            var msg = message.split(':');
            if (msg.length > 0) {
                return '{"success":false, "message":"' + msg[1] + '"}';
            }
        }
    }
    return '{"success":false, "message":null}';
}

%>
